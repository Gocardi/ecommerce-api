// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int      @id @default(autoincrement()) @map("user_id")
  dni          String   @unique @db.VarChar(12)
  fullName     String   @map("full_name") @db.VarChar(150)
  email        String   @unique @db.VarChar(200)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  role         String   @db.VarChar(20) // 'visitante', 'afiliado', 'admin', 'admin_general', 'repartidor'
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  lastLogin    DateTime? @map("last_login")

  // Relations
  affiliate           Affiliate?
  sponsoredAffiliates Affiliate[] @relation("SponsorRelation")
  orders              Order[]
  carts               Cart[]   
  commissions         Commission[]
  referrals           Referral[]  @relation("ReferrerRelation")
  referralsReceived   Referral[]  @relation("ReferredRelation")
  minMonthlyBuys      MinMonthlyBuy[]
  notifications       Notification[]
  shippingAddresses   ShippingAddress[]
  adminRegions        AdminRegion[]

  @@map("users")
}


model Affiliate {
  id       Int     @id @map("affiliate_id")
  sponsorId Int?   @map("sponsor_id")
  phone    String  @db.VarChar(20)
  region   String? @db.VarChar(100)
  city     String? @db.VarChar(100)
  address  String? @db.VarChar(255)
  reference String? @db.VarChar(255) // referencia de dirección
  status   String  @default("active") @db.VarChar(20) // active, pending, suspended
  points   Int     @default(0) // para sistema de premios

  // Relations
  user    User  @relation(fields: [id], references: [id])
  sponsor User? @relation("SponsorRelation", fields: [sponsorId], references: [id])

  @@map("affiliates")
}

// NUEVA: Categorías de productos
model Category {
  id          Int       @id @default(autoincrement()) @map("category_id")
  name        String    @db.VarChar(100)
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          Int     @id @default(autoincrement()) @map("product_id")
  categoryId  Int     @map("category_id")
  name        String  @db.VarChar(200)
  description String?
  price       Decimal @db.Decimal(10, 2)
  affiliatePrice Decimal @map("affiliate_price") @db.Decimal(10, 2) // precio para afiliados
  stock       Int     @default(0)
  minStock    Int     @default(0) @map("min_stock") // stock mínimo
  isActive    Boolean @default(true) @map("is_active")
  imageUrl    String? @map("image_url") @db.VarChar(500)
  weight      Decimal? @db.Decimal(8, 3) // para cálculo de envío
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  category   Category @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("products")
}

// NUEVA: Carrito de compras
model Cart {
  id        Int      @id @default(autoincrement()) @map("cart_id")
  userId    Int?     @map("user_id") // null para visitantes
  sessionId String?  @map("session_id") @db.VarChar(100) // para visitantes
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user  User? @relation(fields: [userId], references: [id])
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        Int @id @default(autoincrement()) @map("cart_item_id")
  cartId    Int @map("cart_id")
  productId Int @map("product_id")
  quantity  Int

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@map("cart_items")
}

// NUEVA: Direcciones de envío
model ShippingAddress {
  id        Int     @id @default(autoincrement()) @map("address_id")
  userId    Int     @map("user_id")
  name      String  @db.VarChar(100) // nombre del destinatario
  phone     String  @db.VarChar(20)
  region    String  @db.VarChar(100)
  city      String  @db.VarChar(100)
  address   String  @db.VarChar(255)
  reference String? @db.VarChar(255)
  isDefault Boolean @default(false) @map("is_default")

  // Relations
  user   User    @relation(fields: [userId], references: [id])
  orders Order[]

  @@map("shipping_addresses")
}

model Order {
  id                Int      @id @default(autoincrement()) @map("order_id")
  userId            Int      @map("user_id")
  shippingAddressId Int?     @map("shipping_address_id")
  createdAt         DateTime @default(now()) @map("created_at")
  status            String   @default("pending") @db.VarChar(20) // pending, paid, shipped, delivered, cancelled
  totalAmount       Decimal  @map("total_amount") @db.Decimal(12, 2)
  shippingCost      Decimal  @default(0) @map("shipping_cost") @db.Decimal(10, 2)
  trackingCode      String?  @map("tracking_code") @db.VarChar(100) // código Shalom
  scheduledDate     DateTime? @map("scheduled_date") // fecha programada
  deliveredAt       DateTime? @map("delivered_at")

  // Relations
  user            User             @relation(fields: [userId], references: [id])
  shippingAddress ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  orderItems      OrderItem[]
  payments        Payment[]

  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement()) @map("order_item_id")
  orderId   Int     @map("order_id")
  productId Int     @map("product_id")
  quantity  Int
  unitPrice Decimal @map("unit_price") @db.Decimal(10, 2)

  // Relations
  order       Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product      @relation(fields: [productId], references: [id])
  commissions Commission[]

  @@map("order_items")
}

model Payment {
  id         Int      @id @default(autoincrement()) @map("payment_id")
  orderId    Int      @map("order_id")
  paidAt     DateTime @map("paid_at")
  method     String   @db.VarChar(50) // 'BCP_code', 'cash', 'credit_card'
  amount     Decimal  @db.Decimal(12, 2)
  status     String   @db.VarChar(20) // 'valid', 'failed', 'pending'
  bcpCode    String?  @map("bcp_code") @db.VarChar(50) // código BCP
  reference  String?  @db.VarChar(100) // referencia del pago

  // Relations
  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Commission {
  id          Int      @id @default(autoincrement()) @map("commission_id")
  affiliateId Int      @map("affiliate_id")
  orderItemId Int      @map("order_item_id")
  type        String   @db.VarChar(20) // 'direct', 'referral'
  amount      Decimal  @db.Decimal(10, 2)
  percentage  Decimal  @db.Decimal(5, 2) // porcentaje aplicado
  status      String   @default("pending") @db.VarChar(20) // pending, approved, paid
  createdAt   DateTime @default(now()) @map("created_at")
  approvedAt  DateTime? @map("approved_at")

  // Relations
  affiliate User      @relation(fields: [affiliateId], references: [id])
  orderItem OrderItem @relation(fields: [orderItemId], references: [id])

  @@map("commissions")
}

model Referral {
  referrerId Int      @map("referrer_id")
  referredId Int      @map("referred_id")
  referredAt DateTime @default(now()) @map("referred_at")

  // Relations
  referrer User @relation("ReferrerRelation", fields: [referrerId], references: [id])
  referred User @relation("ReferredRelation", fields: [referredId], references: [id])

  @@id([referrerId, referredId])
  @@map("referrals")
}

// NUEVA: Configuración de reglas de negocio
model BusinessRule {
  id    Int    @id @default(autoincrement()) @map("rule_id")
  key   String @unique @db.VarChar(50) // 'min_monthly_buy', 'referral_commission', etc.
  value String @db.VarChar(500) // valor JSON o string
  type  String @db.VarChar(20) // 'number', 'percentage', 'json'

  @@map("business_rules")
}

model MinMonthlyBuy {
  affiliateId Int      @id @map("affiliate_id")
  month       DateTime
  quantity    Int
  achieved    Boolean  @default(false) // si cumplió o no

  // Relations
  affiliate User @relation(fields: [affiliateId], references: [id])

  @@unique([affiliateId, month], name: "uq_aff_month")
  @@map("min_monthly_buys")
}

// NUEVA: Sistema de premios
model Reward {
  id          Int     @id @default(autoincrement()) @map("reward_id")
  name        String  @db.VarChar(200)
  description String?
  pointsRequired Int  @map("points_required")
  imageUrl    String? @map("image_url") @db.VarChar(500)
  isActive    Boolean @default(true) @map("is_active")
  stock       Int     @default(0)

  @@map("rewards")
}

// NUEVA: Regiones administrativas
model AdminRegion {
  adminId Int    @map("admin_id")
  region  String @db.VarChar(100)

  // Relations
  admin User @relation(fields: [adminId], references: [id])

  @@id([adminId, region])
  @@map("admin_regions")
}

model Notification {
  id        Int      @id @default(autoincrement()) @map("notification_id")
  userId    Int      @map("user_id")
  type      String   @db.VarChar(50) // 'payment_ok', 'commission', 'account_pending', etc.
  title     String   @db.VarChar(200)
  message   String
  readFlag  Boolean  @default(false) @map("read_flag")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Tutorial {
  id          Int      @id @default(autoincrement()) @map("tutorial_id")
  title       String   @db.VarChar(200)
  description String?
  url         String   @db.VarChar(500)
  contentType String   @map("content_type") @db.VarChar(20) // 'video', 'pdf', etc.
  category    String   @db.VarChar(50) // 'sales', 'platform', 'products'
  order       Int      @default(0) // orden de visualización
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("tutorials")
}